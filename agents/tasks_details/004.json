{
    "task_id": "004-refactor-category-page",
    "task_type": "refactor",
    "feature_request": "Refactor the `+page.svelte` component in the category service by extracting elements into separate, reusable components to improve maintainability and facilitate future development.",
    "summary": "Refactor the `+page.svelte` component in the category service by extracting the category list, category details/edit form, and associated logic into separate, reusable components.",
    "priority": "high",
    "files_to_modify": [
      {
        "file_path": "src/routes/categories/+page.svelte",
        "sections": [
          {
            "section_title": "Import new components and update the main layout",
            "existing_code": "<!-- This is the main component for the categories page -->",
            "instructions": [
              "1.  Remove the existing code related to rendering the category list, category details, and the edit form.",
              "2.  Import the `CategoryList`, `CategoryDetails`, and `CategoryForm` components.",
              "3.  Update the main layout to use the imported components, passing necessary props such as `categories`, `selectedCategory`, `editMode`, and event handlers.",
              "4.  Ensure that the overall structure and functionality of the page remain the same after the refactoring."
            ],
            "expected_code_changes": "<script lang=\"ts\">\n  import { getCategories, createCategory, updateCategory, deleteCategory } from '$lib/services/api';\n  import CategoryList from '$lib/components/categories/CategoryList.svelte';\n  import CategoryDetails from '$lib/components/categories/CategoryDetails.svelte';\n  import CategoryForm from '$lib/components/categories/CategoryForm.svelte';\n\n  // Category model type\n  type Category = {\n    id: string;\n    name: string;\n    description: string;\n    task_ids: string[];\n    created_at: string;\n    updated_at: string;\n  };\n\n  // State management using Svelte 5 runes\n  let categories = $state<Category[]>([]);\n  let isLoading = $state(true);\n  let error = $state<string | null>(null);\n  let selectedCategory = $state<Category | null>(null);\n\n  // Form state\n  let editMode = $state(false);\n  let formName = $state('');\n  let formDescription = $state('');\n  let isSaving = $state(false);\n\n  // Derived properties\n  let hasCategories = $derived(categories.length > 0);\n\n  async function loadCategories() {\n    try {\n      isLoading = true;\n      error = null;\n      categories = await getCategories();\n    } catch (e) {\n      error = e instanceof Error ? e.message : 'Failed to fetch categories';\n    } finally {\n      isLoading = false;\n    }\n  }\n\n  // Load categories on page load\n  loadCategories();\n\n  function selectCategory(category: Category) {\n    selectedCategory = category;\n    editMode = false;\n  }\n\n  function addNewCategory() {\n    selectedCategory = null;\n    editMode = true;\n    formName = '';\n    formDescription = '';\n  }\n\n  function editSelectedCategory() {\n    if (!selectedCategory) return;\n\n    editMode = true;\n    formName = selectedCategory.name;\n    formDescription = selectedCategory.description;\n  }\n\n  async function handleDeleteCategory(categoryId: string) {\n    if (!confirm('Are you sure you want to delete this category?')) {\n      return;\n    }\n\n    try {\n      await deleteCategory(categoryId);\n\n      // Remove from local state\n      categories = categories.filter(c => c.id !== categoryId);\n\n      // Reset selection if deleted category was selected\n      if (selectedCategory?.id === categoryId) {\n        selectedCategory = null;\n        editMode = false;\n      }\n    } catch (e) {\n      alert(e instanceof Error ? e.message : 'Failed to delete category');\n    }\n  }\n\n  async function saveCategory() {\n    // Basic validation\n    if (!formName.trim()) {\n      alert('Category name is required');\n      return;\n    }\n\n    try {\n      isSaving = true;\n\n      const categoryData = {\n        name: formName,\n        description: formDescription,\n      };\n\n      if (selectedCategory && selectedCategory.id) {\n        // Update existing category\n        const updated = await updateCategory(selectedCategory.id, categoryData);\n\n        // Update in local state\n        categories = categories.map(c =>\n          c.id === selectedCategory?.id ? updated : c\n        );\n\n        selectedCategory = updated;\n      } else {\n        // Create new category\n        const created = await createCategory(categoryData);\n\n        // Add to local state\n        categories = [...categories, created];\n        selectedCategory = created;\n      }\n\n      // Exit edit mode\n      editMode = false;\n    } catch (e) {\n      alert(e instanceof Error ? e.message : 'Failed to save category');\n    } finally {\n      isSaving = false;\n    }\n  }\n\n  function cancelEdit() {\n    editMode = false;\n  }\n</script>\n\n<div class=\"container mx-auto p-4 space-y-6\">\n  <div class=\"flex justify-between items-center\">\n    <h1 class=\"text-2xl font-bold\">Categories</h1>\n    <button\n      onclick={addNewCategory}\n      class=\"px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-md flex items-center\"\n    >\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width=\"16\"\n        height=\"16\"\n        viewBox=\"0 0 24 24\"\n        fill=\"none\"\n        stroke=\"currentColor\"\n        stroke-width=\"2\"\n        stroke-linecap=\"round\"\n        stroke-linejoin=\"round\"\n        class=\"mr-2\"\n      >\n        <line x1=\"12\" y1=\"5\" x2=\"12\" y2=\"19\" />\n        <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\" />\n      </svg>\n      New Category\n    </button>\n  </div>\n\n  {#if isLoading}\n    <div class=\"flex items-center justify-center h-64\">\n      <div class=\"animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-500\" />\n    </div>\n  {:else if error}\n    <div class=\"bg-red-900/30 border border-red-800 text-white p-4 rounded-md\">\n      <h3 class=\"text-lg font-semibold\">Error</h3>\n      <p>{error}</p>\n      <button class=\"mt-2 px-4 py-1 bg-red-800 hover:bg-red-700 rounded-md\" onclick={loadCategories}>\n        Retry\n      </button>\n    </div>\n  {:else}\n    <div class=\"flex flex-col lg:flex-row gap-6\">\n      <!-- Left side: Categories List -->\n      <div class=\"w-full lg:w-2/3\">\n        <CategoryList\n          categories={categories}\n          selectedCategory={selectedCategory}\n          onSelectCategory={selectCategory}\n          onEditCategory={editSelectedCategory}\n          onDeleteCategory={handleDeleteCategory}\n          onAddNewCategory={addNewCategory}\n        />\n      </div>\n\n      <!-- Right side: Category Details or Edit Form -->\n      <div class=\"w-full lg:w-1/3\">\n        {#if editMode}\n          <CategoryForm\n            selectedCategory={selectedCategory}\n            formName={formName}\n            formDescription={formDescription}\n            isSaving={isSaving}\n            onSaveCategory={saveCategory}\n            onCancelEdit={cancelEdit}\n          />\n        {:else}\n          <CategoryDetails\n            selectedCategory={selectedCategory}\n            onEditCategory={editSelectedCategory}\n            onDeleteCategory={handleDeleteCategory}\n            onAddNewCategory={addNewCategory}\n          />\n        {/if}\n      </div>\n    </div>\n  {/if}\n</div>",
            "dependencies": [
              "getCategories",
              "createCategory",
              "updateCategory",
              "deleteCategory",
              "CategoryList",
              "CategoryDetails",
              "CategoryForm"
            ],
            "error_handling": [
              "Display error messages when fetching, creating, updating, or deleting categories.",
              "Use alert dialogs to show error messages to the user."
            ],
            "preconditions": [
              "The API endpoints for categories must be accessible."
            ],
            "postconditions": [
              "The category list should be updated after any create, update, or delete operation.",
              "The selected category should be updated after any create or update operation."
            ]
          }
        ],
        "imports_to_add": [
          "import CategoryList from '$lib/components/categories/CategoryList.svelte';",
          "import CategoryDetails from '$lib/components/categories/CategoryDetails.svelte';",
          "import CategoryForm from '$lib/components/categories/CategoryForm.svelte';"
        ],
        "imports_to_remove": []
      }
    ],
    "new_files": [
      {
        "file_path": "src/lib/components/categories/CategoryList.svelte",
        "sections": [
          {
            "section_title": "Category List Component",
            "instructions": [
              "1.  Create a new Svelte component named `CategoryList.svelte`.",
              "2.  This component should receive `categories`, `selectedCategory`, `onSelectCategory`, `onEditCategory`, `onDeleteCategory`, and `onAddNewCategory` as props.",
              "3.  Render the list of categories using the provided data.",
              "4.  Implement the selection, edit, and delete actions for each category.",
              "5.  Include a button to add a new category.",
              "6.  Use appropriate styling and layout to match the existing design.",
              "7.  Handle the case where there are no categories to display.",
              "8.  Ensure that the component is accessible and handles keyboard navigation correctly."
            ],
            "expected_code_changes": "<script lang=\"ts\">\n  // filepath: src/lib/components/categories/CategoryList.svelte\n  \n  // Props\n  let {\n    categories,\n    selectedCategory,\n    onSelectCategory,\n    onEditCategory,\n    onDeleteCategory,\n    onAddNewCategory,\n  } = $props<{ \n    categories: any[];\n    selectedCategory: any;\n    onSelectCategory: (category: any) => void;\n    onEditCategory: (category: any) => void;\n    onDeleteCategory: (categoryId: string) => void;\n    onAddNewCategory: () => void;\n  }>();\n\n  let hasCategories = $derived(categories.length > 0);\n</script>\n\n{#if !hasCategories}\n  <div class=\"bg-surface-800 border border-surface-700 rounded-md p-6 text-center\">\n    <svg\n      xmlns=\"http://www.w3.org/2000/svg\"\n      width=\"48\"\n      height=\"48\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      stroke=\"currentColor\"\n      stroke-width=\"1\"\n      stroke-linecap=\"round\"\n      stroke-linejoin=\"round\"\n      class=\"mx-auto text-surface-400 mb-4\"\n    >\n      <path d=\"M22 19a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h5l2 3h9a2 2 0 0 1 2 2z\" />\n    </svg>\n    <h3 class=\"text-lg font-semibold mb-2\">No Categories Found</h3>\n    <p class=\"text-surface-400 mb-4\">Create your first category to organize benchmark tasks</p>\n    <button onclick={onAddNewCategory} class=\"px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-md\">\n      Create First Category\n    </button>\n  </div>\n{:else}\n  <div class=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n    {#each categories as category}\n      <div\n        class=\"bg-surface-800 border border-surface-700 rounded-md overflow-hidden hover:border-primary-500 transition-colors cursor-pointer {selectedCategory?.id === category.id\n          ? 'border-primary-500 ring-1 ring-primary-500'\n          : ''}\"\n        onclick={() => onSelectCategory(category)}\n      >\n        <div class=\"p-4\">\n          <h3 class=\"text-lg font-semibold mb-1\">{category.name}</h3>\n          <p class=\"text-surface-300 text-sm line-clamp-2\">{category.description || 'No description'}</p>\n        </div>\n        <div class=\"bg-surface-700/50 px-4 py-2 flex justify-between items-center\">\n          <div class=\"flex items-center\">\n            <span class=\"text-sm text-surface-300 mr-1\">Tasks:</span>\n            <span class=\"text-sm font-medium\">{category.task_ids?.length || 0}</span>\n          </div>\n          <div class=\"flex space-x-1\">\n            <button\n              onclick={(e) => {\n                e.stopPropagation();\n                onSelectCategory(category);\n                onEditCategory(category);\n              }}\n              class=\"p-1.5 hover:bg-surface-600 rounded-md\" aria-label=\"Edit category\"\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"14\"\n                height=\"14\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                stroke-width=\"2\"\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n              >\n                <path d=\"M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7\" />\n                <path d=\"M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z\" />\n              </svg>\n            </button>\n            <button\n              onclick={(e) => {\n                e.stopPropagation();\n                onDeleteCategory(category.id);\n              }}\n              class=\"p-1.5 hover:bg-surface-600 rounded-md text-red-400\" aria-label=\"Delete category\"\n            >\n              <svg\n                xmlns=\"http://www.w3.org/2000/svg\"\n                width=\"14\"\n                height=\"14\"\n                viewBox=\"0 0 24 24\"\n                fill=\"none\"\n                stroke=\"currentColor\"\n                stroke-width=\"2\"\n                stroke-linecap=\"round\"\n                stroke-linejoin=\"round\"\n              >\n                <polyline points=\"3 6 5 6 21 6\" />\n                <path d=\"M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2\" />\n                <line x1=\"10\" y1=\"11\" x2=\"10\" y2=\"17\" />\n                <line x1=\"14\" y1=\"11\" x2=\"14\" y2=\"17\" />\n              </svg>\n            </button>\n          </div>\n        </div>\n      </div>\n    {/each}\n  </div>\n{/if}",
            "dependencies": [],
            "error_handling": [],
            "preconditions": [],
            "postconditions": [],
            "data_types": [
              {
                "name": "Category",
                "type": "type",
                "fields": [
                  { "name": "id", "type": "string" },
                  { "name": "name", "type": "string" },
                  { "name": "description", "type": "string" },
                  { "name": "task_ids", "type": "string[]" },
                  { "name": "created_at", "type": "string" },
                  { "name": "updated_at", "type": "string" }
                ]
              }
            ]
          }
        ],
        "imports_to_add": [],
        "imports_to_remove": []
      },
      {
        "file_path": "src/lib/components/categories/CategoryDetails.svelte",
        "sections": [
          {
            "section_title": "Category Details Component",
            "instructions": [
              "1.  Create a new Svelte component named `CategoryDetails.svelte`.",
              "2.  This component should receive `selectedCategory`, `onEditCategory`, `onDeleteCategory`, and `onAddNewCategory` as props.",
              "3.  Render the details of the selected category, including its name, description, creation date, and update date.",
              "4.  Include buttons to edit and delete the selected category.",
              "5.  If no category is selected, display a message and a button to create a new category.",
              "6.  Use appropriate styling and layout to match the existing design.",
              "7.  Ensure that the component is accessible and handles keyboard navigation correctly."
            ],
            "expected_code_changes": "<script lang=\"ts\">\n  // filepath: src/lib/components/categories/CategoryDetails.svelte\n\n  // Props\n  let {\n    selectedCategory,\n    onEditCategory,\n    onDeleteCategory,\n    onAddNewCategory,\n  } = $props<{ \n    selectedCategory: any;\n    onEditCategory: (category: any) => void;\n    onDeleteCategory: (categoryId: string) => void;\n    onAddNewCategory: () => void;\n  }>();\n</script>\n\n<div class=\"bg-surface-800 border border-surface-700 rounded-md overflow-hidden\">\n  <div class=\"bg-surface-700 px-4 py-3\">\n    <h2 class=\"text-lg font-medium\">\n      {#if selectedCategory}\n        Category Details\n      {:else}\n        Select a Category\n      {/if}\n    </h2>\n  </div>\n\n  <div class=\"p-4\">\n    {#if selectedCategory}\n      <!-- Category Details View -->\n      <div class=\"space-y-4\">\n        <div>\n          <h3 class=\"text-lg font-semibold mb-2\">{selectedCategory.name}</h3>\n          <p class=\"text-surface-300\">{selectedCategory.description || 'No description'}</p>\n        </div>\n\n        <div class=\"pt-4 border-t border-surface-700\">\n          <div class=\"flex justify-between text-sm text-surface-400 mb-2\">\n            <span>Tasks in category: {selectedCategory.task_ids?.length || 0}</span>\n          </div>\n          <div class=\"flex justify-between text-sm text-surface-400\">\n            <span>Created: {new Date(selectedCategory.created_at).toLocaleDateString()}</span>\n            <span>Updated: {new Date(selectedCategory.updated_at).toLocaleDateString()}</span>\n          </div>\n        </div>\n\n        <div class=\"flex space-x-2 pt-4\">\n          <button onclick={onEditCategory(selectedCategory)} class=\"px-3 py-2 bg-primary-500 text-white rounded-md hover:bg-primary-600 flex-1\">\n            Edit\n          </button>\n          <button\n            onclick={() => {\n              if (selectedCategory) onDeleteCategory(selectedCategory.id);\n            }}\n            class=\"px-3 py-2 bg-red-500 text-white rounded-md hover:bg-red-600 flex-1\"\n          >\n            Delete\n          </button>\n        </div>\n      </div>\n    {:else}\n      <!-- No category selected -->\n      <div class=\"text-center py-8\">\n        <svg\n          xmlns=\"http://www.w3.org/2000/svg\"\n          width=\"48\"\n          height=\"48\"\n          viewBox=\"0 0 24 24\"\n          fill=\"none\"\n          stroke=\"currentColor\"\n          stroke-width=\"1\"\n          stroke-linecap=\"round\"\n          stroke-linejoin=\"round\"\n          class=\"mx-auto text-surface-500 mb-4\"\n        >\n          <path d=\"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z\" />\n          <polyline points=\"14 2 14 8 20 8\" />\n          <line x1=\"16\" y1=\"13\" x2=\"8\" y2=\"13\" />\n          <line x1=\"16\" y1=\"17\" x2=\"8\" y2=\"17\" />\n          <line x1=\"10\" y1=\"9\" x2=\"8\" y2=\"9\" />\n        </svg>\n        <p class=\"text-surface-400 mb-4\">\n          Select a category to view details\n          <br />\n          or create a new one\n        </p>\n        <button onclick={onAddNewCategory} class=\"px-4 py-2 bg-primary-500 hover:bg-primary-600 text-white rounded-md\">\n          Create Category\n        </button>\n      </div>\n    {/if}\n  </div>\n</div>",
            "dependencies": [],
            "error_handling": [],
            "preconditions": [],
            "postconditions": [],
            "data_types": [
              {
                "name": "Category",
                "type": "type",
                "fields": [
                  { "name": "id", "type": "string" },
                  { "name": "name", "type": "string" },
                  { "name": "description", "type": "string" },
                  { "name": "task_ids", "type": "string[]" },
                  { "name": "created_at", "type": "string" },
                  { "name": "updated_at", "type": "string" }
                ]
              }
            ]
          }
        ],
        "imports_to_add": [],
        "imports_to_remove": []
      },
      {
        "file_path": "src/lib/components/categories/CategoryForm.svelte",
        "sections": [
          {
            "section_title": "Category Form Component",
            "instructions": [
              "1.  Create a new Svelte component named `CategoryForm.svelte`.",
              "2.  This component should receive `selectedCategory`, `formName`, `formDescription`, `isSaving`, `onSaveCategory`, and `onCancelEdit` as props.",
              "3.  Render the form for creating or editing a category, including input fields for the name and description.",
              "4.  Include buttons to save or cancel the form.",
              "5.  Use appropriate styling and layout to match the existing design.",
              "6.  Ensure that the component is accessible and handles keyboard navigation correctly.",
              "7.  Show a loading indicator when the form is being saved."
            ],
            "expected_code_changes": "<script lang=\"ts\">\n  // filepath: src/lib/components/categories/CategoryForm.svelte\n\n  // Props\n  let {\n    selectedCategory,\n    formName,\n    formDescription,\n    isSaving,\n    onSaveCategory,\n    onCancelEdit,\n  } = $props<{ \n    selectedCategory: any;\n    formName: string;\n    formDescription: string;\n    isSaving: boolean;\n    onSaveCategory: () => void;\n    onCancelEdit: () => void;\n  }>();\n</script>\n\n<div class=\"bg-surface-800 border border-surface-700 rounded-md overflow-hidden\">\n  <div class=\"bg-surface-700 px-4 py-3\">\n    <h2 class=\"text-lg font-medium\">\n      {selectedCategory ? 'Edit Category' : 'New Category'}\n    </h2>\n  </div>\n\n  <div class=\"p-4\">\n    <!-- Category Edit Form -->\n    <form class=\"space-y-4\">\n      <div>\n        <label for=\"name\" class=\"block text-sm font-medium text-surface-200 mb-1\">Name*</label>\n        <input\n          id=\"name\"\n          type=\"text\"\n          bind:value={formName}\n          class=\"w-full px-3 py-2 bg-surface-700 border border-surface-600 rounded-md text-white focus:ring-primary-500 focus:border-primary-500\"\n          placeholder=\"Category name\"\n          required\n        />\n      </div>\n\n      <div>\n        <label for=\"description\" class=\"block text-sm font-medium text-surface-200 mb-1\">Description</label>\n        <textarea\n          id=\"description\"\n          rows=\"3\"\n          bind:value={formDescription}\n          class=\"w-full px-3 py-2 bg-surface-700 border border-surface-600 rounded-md text-white focus:ring-primary-500 focus:border-primary-500\"\n          placeholder=\"Category description\"\n        />\n      </div>\n\n      <div class=\"flex space-x-3 pt-4\">\n        <button\n          type=\"submit\"\n          onclick={(e) => {\n            e.preventDefault();\n            onSaveCategory();\n          }}\n          disabled={isSaving}\n          class=\"px-4 py-2 bg-primary-500 text-white rounded-md hover:bg-primary-600 flex-1 flex items-center justify-center\"\n        >\n          {#if isSaving}\n            <svg\n              class=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              fill=\"none\"\n              viewBox=\"0 0 24 24\"\n            >\n              <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\" />\n              <path\n                class=\"opacity-75\"\n                fill=\"currentColor\"\n                d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"\n              />\n            </svg>\n          {/if}\n          {selectedCategory ? 'Update' : 'Create'} Category\n        </button>\n        <button type=\"button\" onclick={onCancelEdit} class=\"px-4 py-2 bg-surface-600 text-white rounded-md hover:bg-surface-500 flex-1\">\n          Cancel\n        </button>\n      </div>\n    </form>\n  </div>\n</div>",
            "dependencies": [],
            "error_handling": [],
            "preconditions": [],
            "postconditions": [],
            "data_types": [
              {
                "name": "Category",
                "type": "type",
                "fields": [
                  { "name": "id", "type": "string" },
                  { "name": "name", "type": "string" },
                  { "name": "description", "type": "string" },
                  { "name": "task_ids", "type": "string[]" },
                  { "name": "created_at", "type": "string" },
                  { "name": "updated_at", "type": "string" }
                ]
              }
            ]
          }
        ],
        "imports_to_add": [],
        "imports_to_remove": []
      }
    ],
    "tests_to_add": [
      {
        "file_path": "src/routes/categories/+page.spec.ts",
        "instructions": [
          "1.  Add tests to verify that the category list is rendered correctly.",
          "2.  Add tests to verify that the category details are rendered correctly.",
          "3.  Add tests to verify that the category form is rendered correctly.",
          "4.  Add tests to verify that the create, update, and delete operations work as expected.",
          "5.  Use mocking to isolate the component from the API.",
          "6.  Test edge cases and error conditions."
        ]
      }
    ],
    "testing_notes": "Ensure that all new components are thoroughly tested, including integration tests to verify that they work correctly together.",
    "dependencies": [],
    "additional_notes": {
      "common_pitfalls": "Ensure that the props are passed correctly to the new components and that the event handlers are wired up correctly.",
      "edge_cases": "Handle the case where there are no categories to display and the case where the API returns an error.",
      "design_decisions": "The category list, category details, and category form were extracted into separate components to improve maintainability and reusability."
    }
  }